#!/usr/bin/env python

import json
from pprint import pprint

def fill_list_of_expr(d, values):
   if type(d) == dict:
     for v in d.values():
        fill_list_of_expr(v, values)
   elif isinstance(d, list):
     for v in d:
        fill_list_of_expr(v, values)
   elif isinstance(d, unicode) and d.startswith("["):
      values.append(d)

def get_patterns_used(d, pattern):
   patterns_used = []

   list_of_expr = []
   fill_list_of_expr(d, list_of_expr)

   for expr in list_of_expr:
     import re
     m = re.findall("%s\(\'(\w+)\'\)" % pattern, expr)
     if m:
        patterns_used.extend(m)

   return sorted(list(set(patterns_used)))


def check(arm_template):
   with open(arm_template) as data_file:
      data = json.load(data_file)

   parameters = {}
   variables = {}

   if "parameters" in data:
     parameters = data['parameters']

   if 'variables' in data:
     variables = data['variables']

   parameters_used = []
   variables_used = []

   parameters_used = get_patterns_used(data, "parameters")
   variables_used = get_patterns_used(data, "variables")

   for parameter_used in parameters_used:
      if parameter_used not in parameters:
         print "ERROR: parameter %s is used but not defined" % parameter_used

   for variable_used in variables_used:
      if variable_used not in variables:
         print "ERROR: variable %s is used but not defined" % variable_used

   for parameter in parameters:
      if parameter not in parameters_used:
         print "WARNING: parameter %s is defined but not used, really?" % parameter

   for variable in variables:
      if variable not in variables_used:
         print "WARNING: variable %s is defined but not used, really?" % variable
         
def main():
    import argparse

    parser = argparse.ArgumentParser(description='Azure ARM template checker.',
                                     formatter_class=argparse.RawDescriptionHelpFormatter)
    parser.add_argument('template', type=str, help="Template to check")

    args = parser.parse_args()

    check(args.template)

if __name__ == '__main__':
    main()
